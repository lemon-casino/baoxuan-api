version: '3'
networks:
  bi-drone:
    external: false
services:
  # 容器名称
  drone-server:
    container_name: drone
    image: drone/drone
    ports:
      - 8611:80
    volumes:
      - /docker/drone:/data
    restart: always
    privileged: true
    networks:
      - bi-drone
    environment:
      - DRONE_GITEE_SERVER=https://gitee.com
      # Gitee OAuth2客户端ID
      # - DRONE_GITEA_CLI（上面的Client ID值）
      - DRONE_GITEE_CLIENT_ID=d509bbe958df2dc6e3ecc98e7fd59a928f71a78bbb5f31165fd2aff4d94a76db
      # Gitee OAuth2客户端密钥（上面的Client Secret值）
      - DRONE_GITEE_CLIENT_SECRET=09914a3e2aacefb1a965107766fdedc594f33da681101c00c933caedc28a9d05
      # drone的共享密钥（生成rpc密钥）
      - DRONE_RPC_SECRET=0f2d780deb868945a4148cbe1e9ffc08
      # drone的主机名(改成自己的域名获得ip+端口(注意是drome的))
      - DRONE_SERVER_HOST=47.95.1.102:8611
      # 外部协议方案根据你的域名判断是http还是https(ip加端口是http)
      - DRONE_SERVER_PROTO=http
      - DRONE_GIT_ALWAYS_AUTH=false
      # 创建管理员账户，这里对应为gitee的用户名
      - DRONE_USER_CREATE=username:loulx,admin:true

  docker-runner:
    container_name: drone-runner
    image: drone/drone-runner-docker
    restart: always
    privileged: true
    networks:
      - bi-drone
    depends_on:
      - drone-server
    volumes:
      - /docker/drone/docker.sock:/var/run/docker.sock
      - /docker/drone/agent/drone.key:/root/drone.key
    environment:
      # 用于连接到Drone服务器的协议。该值必须是http或https。(同上)
      - DRONE_RPC_PROTO=http
      # 用于连接到Drone服务器的主机名(同上)
      - DRONE_RPC_HOST=47.95.1.102:8611
      # Drone服务器进行身份验证的共享密钥，和上面设置一样（生成rpc密钥）
      - DRONE_RPC_SECRET=0f2d780deb868945a4148cbe1e9ffc08
      # 限制运行程序可以执行的并发管道数
      - DRONE_RUNNER_CAPACITY=2
      # docker runner 名称
      - DRONE_RUNNER_NAME=docker-runner
      - DRONE_DEBUG=true                      # 调试相关，部署的时候建议先打开
      - DRONE_LOGS_DEBUG=true                 # 调试相关，部署的时候建议先打开
      - DRONE_LOGS_TRACE=true                 # 调试相关，部署的时候建议先打开
      - TZ=Asia/Shanghai


